{******************************************************************************
*
* Module Name   : $AUX_XSP.RPF
*
* Purpose       : Template created using $AUXSETUP.
*                 Cancel Sample
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}
{*** IMPLEMENTAÇÃO THERMO ***}
{ 
No.	Data		Quem	O que
001	02/04/2013		Exibir campo JUSTIFICATIVA
002 	15/05/2014 	LOX 	Justificativa Obrigatória
}
JOIN LIBRARY $AUX_LIB
JOIN LIBRARY $LIB_JOB_VALIDATE
JOIN LIBRARY $LIB_SAMP
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $SAMPWSHT
JOIN LIBRARY $EXPLORER_AUX

join STANDARD_LIBRARY STD_ARRAY
join STANDARD_LIBRARY STD_GENERAL
join STANDARD_LIBRARY STD_DATABASE
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_STRUCTURE
JOIN STANDARD_LIBRARY STD_CLIENT
JOIN STANDARD_LIBRARY STD_GENERAL
JOIN STANDARD_LIBRARY STD_USER_GLOBAL

SET NAME "DISPLAY/"
ENABLE WINDOWS
SET NOTPROTECTED

Array prompt_text
Array table_names
Array change_stat ARRAY_SIZE (3) = " "

Array display_details ARRAY_SIZE ( 0 , 6 )
Array prompt_details ARRAY_SIZE ( 0 , 6 )


{***********************************************************************}
{                   USER INPUT BEGINS HERE                              }
{***********************************************************************}

{SECTION A - SCREEN SETUP}
{specify the header text for the command window}
{ie header_txt =  "Change Sample Status"}

    header_txt = GET_USER_MESSAGE("AUX_XSP_HEADER_TXT" ,1)

{specify footer text for the command window }

    footer_txt = GET_USER_MESSAGE("AUX_XSP_FOOTER_TXT" ,1)

{specify the text string to be displayed upon        }
{successful completion of the command                }
{ie success_txt = "Sample Status Changed"            }

  success_txt        = GET_USER_MESSAGE("AUX_XSP_SUCCESS_TXT" ,1)

{specify the text string to be displayed upon        }
{abortion from the command                           }
{ie abort_txt =   "Change Sample Status Aborted"     }

  abort_txt          = GET_USER_MESSAGE("AUX_XSP_ABORT_TXT" ,1)

{specify the sample statuses allowable within the    }
{browse list for this command if sample identity     }
{is prompted for.                                    }

{ #SUSAND 6/5/92 Bug 682 - Dont allow browse on suspended samples }

  samp_stat_allowed       =  "UWVCHI"
  job_stat_allowed        =  "AVCX"
  test_stat_allowed        =  " "


{SECTION B - INITIAL PROMPTS }


{Specify the tables that the initial prompts browse  }
{upon .                                              }

   table_names [ 1 ]    = "SAMPLE"
{  table_names [ 2 ]    = "TEST"}


{Specify the initial prompt fields and the associated}
{prompt text strings                                 }

  prompt_text [ 1 ]    =  GET_USER_MESSAGE("AUX_XSP_PROMPT_TXT" ,1)
 {prompt_text [ 2 ]    = "Enter Test Name"}


{SECTION C - DISPLAY INFORMATION}

{The user may require a header for the display area }
{Any descriptive text may be used here              }

    mess_area_one = ""


{Specify the fields which require displaying with the}
{appropriate descriptive text string                 }

{Display fields from prompt_table[1] : }

  display_details [ 1, MESSAGE_POSITION    ]   = GET_USER_MESSAGE("AUX_XSP_DISPLAY_TXT" ,1)
  display_details [ 1, TYPE_POSITION       ]   = "DISPLAY"
  display_details [ 1, TABLE_NAME_POSITION ]   = "SAMPLE"
  display_details [ 1, FIELD_NAME_POSITION ]   = "ID_TEXT"

  display_details [ 2, MESSAGE_POSITION    ]   = GET_USER_MESSAGE("AUX_XSP_DISPLAY_TXT2" ,1)
  display_details [ 2, TYPE_POSITION       ]   = "DISPLAY"
  display_details [ 2, TABLE_NAME_POSITION ]   = "SAMPLE"
  display_details [ 2, FIELD_NAME_POSITION ]   = "STATUS"

  display_details [ 3, MESSAGE_POSITION    ]   = GET_USER_MESSAGE("AUX_XSP_DISPLAY_TXT3" ,1)
  display_details [ 3, TYPE_POSITION       ]   = "DISPLAY"
  display_details [ 3, TABLE_NAME_POSITION ]   = "SAMPLE"
  display_details [ 3, FIELD_NAME_POSITION ]   = "JOB_NAME"

  display_details [ 4, MESSAGE_POSITION    ]   = GET_USER_MESSAGE("AUX_XSP_DISPLAY_TXT_4" ,1)
  display_details [ 4, TYPE_POSITION       ]   = "DISPLAY"
  display_details [ 4, TABLE_NAME_POSITION ]   = "SAMPLE"
  display_details [ 4, FIELD_NAME_POSITION ]   = "LOGIN_DATE"


{Display fields from prompt_table[2] : }

 {display_details [ 1, MESSAGE_POSITION    ]   = ""
  display_details [ 1, TYPE_POSITION       ]   = ""
  display_details [ 1, TABLE_NAME_POSITION ]   = ""
  display_details [ 1, FIELD_NAME_POSITION ]   = ""

  display_details [ 2, MESSAGE_POSITION    ]   = ""
  display_details [ 2, TYPE_POSITION       ]   = ""
  display_details [ 2, TABLE_NAME_POSITION ]   = ""
  display_details [ 2, FIELD_NAME_POSITION ]   = ""

  display_details [ 3, MESSAGE_POSITION    ]   = ""
  display_details [ 3, TYPE_POSITION       ]   = ""
  display_details [ 3, TABLE_NAME_POSITION ]   = ""
  display_details [ 3, FIELD_NAME_POSITION ]   = ""}


  {SECTION D - FIELD ASSIGNMENT                }

{  This section is divided into three areas; }
{                                            }
{         (1) Interactive Update             }
{         (2) Non-interactive Update         }
{         (3) Status Change Update           }

{----------------------------------------------------}
{  1.   I N T E R A C T I V E   U P D A T E          }
{----------------------------------------------------}

{Specify the fields which require Updating and also  }
{require a user input.Define the text string         }
{associated with the input along with the browse type}


  {Update fields associated with prompt_table[1]}
  {Interactive_browse may be filled with either }
  {the browse table_name.field or a number to   }
  {define the size of the prompted field ie "10"}
  {or if no browse required " ".                }

{The user may require a header for the prompt area. }
{ Any descriptive text may be used here.            }

mess_area_two = ""

  prompt_details [ 1 , MESSAGE_POSITION    ]  = "Justificativa"
  prompt_details [ 1 , TYPE_POSITION       ]  = "FORMAT"
  prompt_details [ 1 , TABLE_NAME_POSITION ]  = "SAMPLE"
  prompt_details [ 1 , FIELD_NAME_POSITION ]  = "JUSTIFICATIVA"

  prompt_details [ 2 , MESSAGE_POSITION    ]  = "Comentários"
  prompt_details [ 2 , TYPE_POSITION       ]  = "FORMAT"
  prompt_details [ 2 , TABLE_NAME_POSITION ]  = "SAMPLE"
  prompt_details [ 2 , FIELD_NAME_POSITION ]  = "COMENTARIOS"


{ prompt_details [ 1 , MESSAGE_POSITION    ]  = ""
  prompt_details [ 1 , TYPE_POSITION       ]  = ""
  prompt_details [ 1 , TABLE_NAME_POSITION ]  = ""
  prompt_details [ 1 , FIELD_NAME_POSITION ]  = ""

  prompt_details [ 2 , MESSAGE_POSITION    ]  = ""
  prompt_details [ 2 , TYPE_POSITION       ]  = ""
  prompt_details [ 2 , TABLE_NAME_POSITION ]  = ""
  prompt_details [ 2 , FIELD_NAME_POSITION ]  = ""

 }
  {Update fields associated with prompt_table[2]}
{
  prompt_details [ 1 , MESSAGE_POSITION    ]  = ""
  prompt_details [ 1 , TYPE_POSITION       ]  = ""
  prompt_details [ 1 , TABLE_NAME_POSITION ]  = ""
  prompt_details [ 1 , FIELD_NAME_POSITION ]  = ""

  prompt_details [ 2 , MESSAGE_POSITION    ]  = ""
  prompt_details [ 2 , TYPE_POSITION       ]  = ""
  prompt_details [ 2 , TABLE_NAME_POSITION ]  = ""
  prompt_details [ 2 , FIELD_NAME_POSITION ]  = ""
 }

{-----------------------------------------------------}
{   2.   S T A T U S    C H A N G E   U P D A T E     }
{-----------------------------------------------------}


{  Non interactive update of the status field        }
{  is defined within the array change_stat[n]        }
{  where n = the array element that defines the      }
{  table associated with the status in the array     }
{  prompt_table[n].                                  }
{  To update sample.status to "V" the user would     }
{  define change_stat[1] = "V" where prompt_table[1] }
{   = "SAMPLE"                                       }
{  If the status change should be back to the old    }
{  status change_stat[n] = "OLD_STATUS".             }

   change_stat[1] = "X"
{  change_stat[2] = " "
}

{*************************************************}
{             END  OF  USER  INPUT                }
{*************************************************}

aux_generator (  header_txt ,
		 footer_txt ,
	       	 mess_area_one ,
		 mess_area_two  ,
                 samp_stat_allowed ,
                 job_stat_allowed ,
                 test_stat_allowed ,
		 prompt_text       ,
		 table_names       ,
                 change_stat                  ,
                 global ( "current_library" ) ,
                 Success_txt ,
		 Abort_txt   ,
		 TRUE      ,
		 display_details ,
		 prompt_details  ,
		 "Read Transaction"  ,
		 "Write Transaction")
{**************************************************************************}
{                            Action Routine                                }
{**************************************************************************}

ROUTINE action ( VALUE first_id, VALUE second_id )

	{ 002 \/ }
	
	{

 	DECLARE cancel_id, sample_id
                    
		cancel_id = select sample.cancelamento for update where id_numeric = first_id

		ASSIGN SAMPLE.cancelamento = cancel_id + 1 

		if transaction_is_write() = false then
			START WRITE TRANSACTION "CANCELAR AMOSTRA"
		else
				
		endif

		UPDATE SAMPLE
	}

	{ 002 /\ }
	
	{
	DECLARE mot_just
	
	mot_just = SELECT sample . justificativa 
	
		IF (STRIP(mot_just) = "" ) THEN 	
			flash_message ("A Justificativa é obrigatória!", TRUE)
			RETURN (FALSE)
			
		ENDIF
	}

	DECLARE on_wks

	IF ( SELECT sample . on_wks ) THEN

		wks_file = "smp$worksheets:" :
		           strip ( SELECT sample . id_numeric ) :
		           ".wss"

		FILE DELETE wks_file, status

		ASSIGN sample . on_wks = FALSE

	ENDIF
	
RETURN ( TRUE )

ENDROUTINE {action}

{**************************************************************************}
{                            Select Routine                                }
{**************************************************************************}

ROUTINE select_key ( VALUE line     , display_id      ,
                     VALUE first_id , VALUE second_id )
{menuprocs ...etc}

ENDROUTINE

{**************************************************************************}
{                           Validation Routine                             }
{**************************************************************************}

ROUTINE validation ( display_id )

	DECLARE justif, chk_ok, phrase_text, samp_id

	chk_ok  = FALSE
	justif  = SELECT sample . justificativa
	samp_id = SELECT sample . id_numeric 
	
	phrase_text = SELECT phrase . phrase_text
                    WHERE phrase_type = "JUST_AMOS" AND
                          phrase_text = justif

	IF ( NOT ( user_global_exists ( "JustAmosValidate", samp_id ) ) ) THEN
		add_global_cluster ( "JustAmosValidate" )
		add_user_global ( "JustAmosValidate", samp_id )
	ENDIF

	IF ( phrase_text <> EMPTY )
		chk_ok = TRUE
	ELSE   
		FLASH_MESSAGE ( "Necessário informar uma justificativa válida.", TRUE )
	ENDIF

	assign_user_global ( "JustAmosValidate", samp_id, chk_ok )
	
	RETURN ( chk_ok )

ENDROUTINE

ROUTINE aux_validation ( self , data )
	DECLARE chk_ok, sample_id, ret_message, text_message, message_box_title, var_global
	DECLARE int, aOdb, aux_report, aux_identity, success, table
 
	ARRAY amostras ARRAYSIZE (0)

	chk_ok     = FALSE
	var_global = FALSE
	
	aOdb = self.data
	aOdb.set_first()
	
	int = 1

	IF ( aOdb.current <> EMPTY )

		WHILE ( aOdb.current <> EMPTY ) DO

			sample_id = SELECT 'self.table'.id_numeric IN OBJECT aOdb.current
			amostras [ int ] = sample_id

			aOdb.set_next()

			int = int + 1

		ENDWHILE

	ENDIF
	
	{* deleting existing global info for sample id...                                   *}

      IF user_global_exists ( "JustAmosValidate" , sample_id  ) THEN
      	delete_user_global ( "JustAmosValidate" , sample_id )
      ENDIF

	{* message_box_title = "Amostra: " : sample_id                                      *}

	{* text_message = "Obrigatório informar uma justificativa para o cancelamento."     *}
	{* text_message = text_message : ASCII (10) : ASCII (13)                            *}
	{* text_message = text_message : "Deseja continuar?"                                *}

   	{* ret_message = client_message_box ( text_message            ,                     *}
      {*                              		   message_box_title ,                    *}
      {*                              		       MB_ICONSTOP + MB_YESNO)            *}
	{* IF ( ret_message ) = 6 THEN                                                      *}

		var_global   = FALSE
		success      = FALSE
		table        = "SAMPLE"
		aux_identity = "MODJUST"


		{* CALL_ROUTINE rout   *}
		{*	IN LIBRARY lib   *}
		{*	USING param      *}

		define_explorer_aux_class ()
		
		CREATE OBJECT EXPLORER_AUX_CLASS, aux_report

		aux_report . load_details ( table, aux_identity )
		aux_report . data = aOdb

		success = aux_report . go ()

		IF ( NOT ( user_cluster_exists ( "JustAmosValidate" ) ) ) THEN
			add_global_cluster ( "JustAmosValidate" )
		ENDIF
	
		IF ( NOT ( user_global_exists ( "JustAmosValidate" , sample_id ) ) ) THEN
			add_user_global    ( "JustAmosValidate", sample_id )
                 	assign_user_global ( "JustAmosValidate",  sample_id , var_global ) 
		ENDIF

		var_global = read_user_global ( "JustAmosValidate" , sample_id  )

	{* ENDIF                                                                            *}
	
	IF ( var_global ) AND ( success) THEN
		chk_ok = TRUE
	ENDIF
	
	RETURN ( chk_ok )
ENDROUTINE


{**************************************************************************}
{ Explorer Aux Report Field Action Routine -                               }
{**************************************************************************}

ROUTINE aux_xsp_explorer_user_action ( self , data )

    DECLARE sample_id, mot_just

    
	sample_id = SELECT sample . id_numeric IN OBJECT data
    
    	auto_validate_job ( sample_id )   
	{
	mot_just = SELECT sample . justificativa IN OBJECT DATA
	
		IF (STRIP(mot_just) = "" ) THEN 	
			flash_message ("A Justificativa é obrigatória!", TRUE)
			RETURN (FALSE)		
		ENDIF
	}
			{
			cancel_id = select sample.cancelamento for update where id_numeric = sample_id

			ASSIGN SAMPLE.cancelamento = cancel_id + 1 
			if transaction_is_write() = false then
				START WRITE TRANSACTION "CANCELAR AMOSTRA"
			else
				START READ TRANSACTION "CANCELAR AMOSTRA"	
			endif

			UPDATE SAMPLE
			COMMIT
			}
RETURN (TRUE)

ENDROUTINE

{**************************************************************************}

ROUTINE aux_post_commit_sample_cancel ( self, data )

RETURN (TRUE)

ENDROUTINE

{**************************************************************************}



