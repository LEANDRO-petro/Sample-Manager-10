{******************************************************************************
*
* Module Name   : STOCK_INST_RPT.RPF
*
* Purpose       : Formulario para escolha do estoque e instrumento para o usuario
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}

JOIN STANDARD_LIBRARY STD_LOGIN
JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_WINDOW
JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_DATABASE
JOIN STANDARD_LIBRARY STD_MESSAGE
JOIN LIBRARY $WKSBROWSE
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $LIB_STAN

JOIN LIBRARY $PROMPT_TOOLBAR

prompt_toolbar_initialise ( )


SET NOTPROTECTED
SET NAME "DEFER/"
SET CREATE FALSE
ENABLE WINDOWS
SET FORMAT "99999999"

option = " "
 CREATE_FORM (option )

ROUTINE CREATE_FORM ( teste)
	
	{criacao do Formulario}
	declare form, lblUserID, UserID, lblUserName, UserName, stocks, instruments
	
	PROMPT OBJECT form
	CLASS PROMPT_CLASS_FORM
	WITH ( row    = 10 			       		,
	       column = 15                              		,
	       width  = GLOBAL ( "SCREEN_WIDTH" )      		,
	       height = GLOBAL ( "SCREEN_HEIGHT" )  		,
	       button_style = FORM_BUTTON_NONE         		,
	       return_behaviour = FORM_RETURN_STAY     		,
	       header = "Atribuição de Material e Instrumentos"	)	
	
	form . add_frame ( "Informações do Usuário" , 1 , 1 , 2 , form . width )
	
	PROMPT OBJECT lblUserID
			WITH ( 	row    = 1 ,
			       	column = 2 ,
			       	bold   = TRUE ,
			       	value  = "ID do Usuário" )
			       	
	form . add_display ( lblUserID )
	
	PROMPT OBJECT UserID
			WITH ( 	row    = 1 ,
			       	column = 20 ,
			       	bold   = TRUE ,
		       		value  = OPERATOR )
		       		
	form . add_display ( UserID )
	
	PROMPT OBJECT lblUserName
				WITH ( 	row    = 2 ,
				       	column = 2 ,
				       	bold   = TRUE ,
				       	value  = "Nome do Usuário" )
				       	
	form . add_display ( lblUserName )
		
	PROMPT OBJECT UserName
			WITH ( 	row    = 2 ,
				column = 20 ,
				bold   = TRUE ,
				value  = SELECT PERSONNEL.NAME WHERE IDENTITY = OPERATOR )
			       		
	form . add_display ( UserName )
	
	form . add_frame ( "Materiais a serem utilizados" , 1 , 5 , 7 , form . width )
	{add grid for stock}
	CREATE OBJECT "STD_GRID_EDITOR", grid_stock
	
	grid_stock . height = 5
	grid_stock . width = form . width-2
	grid_stock . row = 7
	grid_stock . column = 2
	grid_stock . cell_columns = 6
	grid_stock . title_text_top [ 1 , 1 ] = "Ensaio"
	grid_stock . title_text_top [ 2 , 1 ] = "Versão do Ensaio"
	grid_stock . title_text_top [ 3 , 1 ] = "Material"
	grid_stock . title_text_top [ 4 , 1 ] = "Lote"
	grid_stock . title_text_top [ 5 , 1 ] = "Quantidade"
	grid_stock . title_text_top [ 6 , 1 ] = "Unidade"
	grid_stock . title_size_top = 1
	
	form . add_prompt (grid_stock)
	
	ARRAY grid_stock . user_info ARRAYSIZE ( 0 , 6 )
	
	stocks = SELECT STOCK_USE_BY_USER.USER_ID WHERE USER_ID = OPERATOR
	
	counter = 0
	
	WHILE stocks <> EMPTY DO
	
	   counter = counter + 1
	
	   grid_stock . user_info [ counter , 1 ] = SELECT STOCK_USE_BY_USER.ANALYSIS
	   grid_stock . user_info [ counter , 2 ] = SELECT STOCK_USE_BY_USER.ANALYSIS_VERSION
	   grid_stock . user_info [ counter , 3 ] = SELECT STOCK_USE_BY_USER.STOCK
	   grid_stock . user_info [ counter , 4 ] = SELECT STOCK_USE_BY_USER.STOCK_BATCH
	   grid_stock . user_info [ counter , 5 ] = SELECT STOCK_USE_BY_USER.AMOUNT_USED
	   grid_stock . user_info [ counter , 6 ] = SELECT STOCK_USE_BY_USER.UNIT
	
	   NEXT STOCK_USE_BY_USER
	
	   stocks = SELECT STOCK_USE_BY_USER.USER_ID
	
	ENDWHILE
	
	grid_stock . cell_rows = counter
	grid_stock . column_size [ 1 ] = 15
	grid_stock . column_size [ 2 ] = 5
	grid_stock . column_size [ 3 ] = 15
	grid_stock . column_size [ 4 ] = 15
	grid_stock . column_size [ 5 ] = 5
	grid_stock . column_size [ 6 ] = 17
	
	grid_stock . title_separator_top = GRID_SEPARATOR_BOTH
	
	grid_stock . display_cell_routine = "display_components"
	grid_stock . prompt_cell_routine = "prompt_components"
	grid_stock . insert_routine       = "stock_insert"
	grid_stock . remove_routine       = "stock_remove"
	
	CREATE OBJECT TOOLBAR_CLASS, toolbar
	toolbar . height = 1
	toolbar . row = 5
	
	CREATE OBJECT TOOLBAR_BUTTON_CLASS , toolbutton
	toolbutton . set_icon  ( "INT_NEW_ITEM" )
	toolbutton . mouse_click_routine = "stock_insert"
	toolbutton . vgl_library = GLOBAL ( "CURRENT_LIBRARY" )
	toolbutton . tooltip       = "Adicionar Material"

	toolbar . add_item ( toolbutton )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS , toolbutton
	toolbutton . set_icon  ( "INT_DELETE_ITEM" )
	toolbutton . mouse_click_routine = "stock_remove"
	toolbutton . vgl_library = GLOBAL ( "CURRENT_LIBRARY" )
	toolbutton . tooltip       = "Remover Material"
	
	toolbar . add_item ( toolbutton )
	
	form . add_prompt( toolbar )

		
	
	form . add_frame ( "Instrumentos a serem utilizados" , 1 , 14 , 7 , form . width )
	
	CREATE OBJECT "STD_GRID_EDITOR", grid_Instrument
		
	grid_Instrument . height = 5
	grid_Instrument . width = form . width-2
	grid_Instrument . row = 16
	grid_Instrument . column = 2
	grid_Instrument . cell_columns = 4
	grid_Instrument . title_text_top [ 1 , 1 ] = "Ensaio"
	grid_Instrument . title_text_top [ 2 , 1 ] = "Versão do Ensaio"
	grid_Instrument . title_text_top [ 3 , 1 ] = "Componente"
	grid_Instrument . title_text_top [ 4 , 1 ] = "Instrument"
	grid_Instrument . title_size_top = 1
		
	form . add_prompt (grid_Instrument)
	
	ARRAY grid_Instrument . user_info ARRAYSIZE ( 0 , 4 )
		
	instruments = SELECT INSTRUMENT_USE_BY_USER.USER_ID WHERE USER_ID = OPERATOR

	counter = 0

	WHILE instruments <> EMPTY DO

	   counter = counter + 1

	   grid_Instrument . user_info [ counter , 1 ] = SELECT INSTRUMENT_USE_BY_USER.ANALYSIS
	   grid_Instrument . user_info [ counter , 2 ] = SELECT INSTRUMENT_USE_BY_USER.ANALYSIS_VERSION
	   grid_Instrument . user_info [ counter , 3 ] = SELECT INSTRUMENT_USE_BY_USER.COMPONENT
	   grid_Instrument . user_info [ counter , 4 ] = SELECT INSTRUMENT_USE_BY_USER.INSTRUMENT
	   
	   NEXT INSTRUMENT_USE_BY_USER

	   instruments = SELECT INSTRUMENT_USE_BY_USER.USER_ID 

	ENDWHILE

	grid_Instrument . cell_rows = counter
	grid_Instrument . column_size [ 1 ] = 15
	grid_Instrument . column_size [ 2 ] = 5
	grid_Instrument . column_size [ 3 ] = 15
	grid_Instrument . column_size [ 4 ] = 39

	grid_Instrument . title_separator_top = GRID_SEPARATOR_BOTH

	grid_Instrument . display_cell_routine = "display_components_inst"
	grid_Instrument . prompt_cell_routine = "prompt_components_inst"
	
	CREATE OBJECT TOOLBAR_CLASS, toolbarInst
	toolbarInst . height = 1
	toolbarInst . row = 14

	CREATE OBJECT TOOLBAR_BUTTON_CLASS , toolbutton
	toolbutton . set_icon  ( "INT_NEW_ITEM" )
	toolbutton . mouse_click_routine = "Instrument_insert"
	toolbutton . vgl_library = GLOBAL ( "CURRENT_LIBRARY" )
	toolbutton . tooltip       = "Adicionar Instrumento"

	toolbarInst . add_item ( toolbutton )

	CREATE OBJECT TOOLBAR_BUTTON_CLASS , toolbutton
	toolbutton . set_icon  ( "INT_DELETE_ITEM" )
	toolbutton . mouse_click_routine = "Instrument_remove"
	toolbutton . vgl_library = GLOBAL ( "CURRENT_LIBRARY" )
	toolbutton . tooltip       = "Remover Instrumento"

	toolbarInst . add_item ( toolbutton )
		
	form . add_prompt( toolbarInst )
	
	{add buttons}
	PROMPT OBJECT save_button
	CLASS "STD_PROMPT_BUTTON"
		ON LINE 22 FROM form . width-25 TO form . width-15
		WITH ( caption = "Salvar"	,
		       mouse_click_routine = "save_button_routine" )

	form . add_prompt(save_button)
	
	PROMPT OBJECT cancel_button
		CLASS "STD_PROMPT_BUTTON"
			ON LINE 22 FROM form . width-10 TO form . width
			WITH ( caption = "Fechar"	,
			       mouse_click_routine = "cancel_button_routine" )
	
	form . add_prompt(cancel_button)
	
	form . start_prompt ( )
	
	form . wait_prompt ( )
	
ENDROUTINE

ROUTINE stock_insert ( self )

	DECLARE current_row

	current_row    = grid_stock . CELL_ROWS + 1

	IF current_row = 0 THEN

		current_row = 1

	ENDIF
	
	grid_stock . USER_INFO [current_row,1] = ""
	grid_stock . USER_INFO [current_row,2] = ""
	grid_stock . USER_INFO [current_row,3] = "" 
	grid_stock . USER_INFO [current_row,4] = ""
	grid_stock . USER_INFO [current_row,5] = ""
	grid_stock . USER_INFO [current_row,6] = ""
	
	grid_stock . insert_row ( current_row , 1 , GRID_SEPARATOR_NONE )
	grid_stock . set_position ( 1 , current_row )
	grid_stock . re_display_contents ()

	RETURN ( TRUE )

ENDROUTINE

ROUTINE stock_remove ( self )


	DECLARE line_position 
	
	IF grid_stock . current_row > 0 THEN
		
		line_position = grid_stock . current_row
		
		array_remove_slice ( grid_stock . USER_INFO , 1 , grid_stock . current_row )
		
		grid_stock . remove_row  ( line_position )
		grid_stock . re_display_contents ()
	
	ENDIF
	
	RETURN ( TRUE )

ENDROUTINE

ROUTINE Instrument_insert ( self )

	DECLARE current_row

	current_row    = grid_instrument . CELL_ROWS + 1

	IF current_row = 0 THEN

		current_row = 1

	ENDIF

	grid_Instrument . USER_INFO [current_row,1] = ""
	grid_Instrument . USER_INFO [current_row,2] = ""
	grid_Instrument . USER_INFO [current_row,3] = "" 
	grid_Instrument . USER_INFO [current_row,4] = ""

	grid_Instrument . insert_row ( current_row , 1 , GRID_SEPARATOR_NONE )
	grid_Instrument . re_display_contents ()
	grid_Instrument . set_position ( 1 , current_row )

	RETURN ( TRUE )

ENDROUTINE

ROUTINE Instrument_remove ( self )


	DECLARE line_position 
	
	IF grid_instrument.current_row > 0 THEN
	
		line_position = grid_Instrument . current_row

		array_remove_slice ( grid_Instrument . USER_INFO , 1 , grid_Instrument . current_row )

		grid_Instrument . remove_row  ( line_position )
		grid_Instrument . re_display_contents ()

	ENDIF
	
	RETURN ( TRUE )

ENDROUTINE



ROUTINE save_button_routine (self)
	
	{REMOVER TODOS OS ITENS DA TABELA PARA O USUARIO}
	
	DECLARE SQL, QTY, check_ok, Salvo
	SQL = "DELETE FROM STOCK_USE_BY_USER WHERE USER_ID = '" : strip(OPERATOR) : "'"
	execute_sql ( SQL)
	execute_sql ( "commit")
	
	{LOOP NO GRID}
	DECLARE MAX_ROWS, CONT, KEY0, msg
	
	salvo = true
	
	MAX_ROWS = grid_stock.cell_rows
	
	CONT = 1
	WHILE CONT <= MAX_ROWS DO
		
		KEY0 = PAD(OPERATOR," ",10)
		KEY0 = KEY0 : PAD(grid_stock . USER_INFO [CONT,1]," ",15)
		KEY0 = KEY0 : PAD(grid_stock . USER_INFO [CONT,2]," ",10)
		KEY0 = KEY0 : PAD(grid_stock . USER_INFO [CONT,3]," ",20)
		
		
		RESERVE ENTRY STOCK_USE_BY_USER,KEY0, check_ok
		
		if (check_ok = empty) then
			QTY = NUMERIC(grid_stock . USER_INFO [CONT,5])

			ASSIGN STOCK_USE_BY_USER.STOCK_BATCH = grid_stock . USER_INFO [CONT,4]
			ASSIGN STOCK_USE_BY_USER.AMOUNT_USED = QTY
			ASSIGN STOCK_USE_BY_USER.UNIT = grid_stock . USER_INFO [CONT,6]
			
			START WRITE TRANSACTION "transaction name"
			UPDATE STOCK_USE_BY_USER
			COMMIT
		else
			msg = "Pelo menos um dos itens já existem no banco de dados " : grid_stock . USER_INFO [CONT,1]
			flash_message(msg,true)
			salvo = false
		endif
		
		CONT = CONT + 1
	ENDWHILE
	
	{REMOVER TODOS OS ITENS DA TABELA PARA O USUARIO}
	
	SQL = "DELETE FROM INSTRUMENT_USE_BY_USER WHERE USER_ID = '" : strip(OPERATOR) : "'"
	execute_sql ( SQL)
	execute_sql ( "commit")

	{LOOP NO GRID}
	
	MAX_ROWS = grid_instrument.cell_rows

	CONT = 1
	WHILE CONT <= MAX_ROWS DO
		
		{verifica_consistencia(grid_instrument . USER_INFO [CONT,1],grid_instrument . USER_INFO [CONT,2],grid_instrument . USER_INFO [CONT,3],grid_instrument . USER_INFO [CONT,4]) }

		IF (( BLANK(grid_instrument . USER_INFO [CONT,1]) = FALSE ) AND
    		    ( BLANK(grid_instrument . USER_INFO [CONT,2]) = FALSE ) AND
    		    ( BLANK(grid_instrument . USER_INFO [CONT,3]) = FALSE ) AND
		    ( BLANK(grid_instrument . USER_INFO [CONT,4]) = FALSE )) THEN
 
			KEY0 = PAD(OPERATOR ," ",10)
			KEY0 = KEY0 : PAD(grid_instrument . USER_INFO [CONT,1]," ",15)
			KEY0 = KEY0 : PAD(grid_instrument . USER_INFO [CONT,2], " ",10)
			KEY0 = KEY0 : PAD(grid_instrument . USER_INFO [CONT,3], " ",40)
		
			RESERVE ENTRY INSTRUMENT_USE_BY_USER,KEY0, check_ok

			if (check_ok = empty) then
			
				ASSIGN INSTRUMENT_USE_BY_USER.INSTRUMENT = grid_instrument . USER_INFO [CONT,4]
			
				START WRITE TRANSACTION "transaction name"
				UPDATE INSTRUMENT_USE_BY_USER
				COMMIT
			else
				msg = "Pelo menos um dos itens já existem no banco de dados " : grid_instrument . USER_INFO [CONT,1]
				flash_message(msg,true)
				salvo = false
			endif
		ELSE
			msg = "Favor completar o cadastro da linha " : STRIP(CONT)
			flash_message(msg,true)
			salvo = false
		ENDIF

		CONT = CONT + 1
	ENDWHILE
	
	if salvo = true then
		flash_message("Itens salvos com sucesso!",TRUE)
	endif
	
ENDROUTINE

ROUTINE cancel_button_routine (self)
	exit
ENDROUTINE

ROUTINE display_components (       self        ,
                             VALUE cell_column ,
                             VALUE cell_row    ,
                                   window      ,
                             VALUE column      ,
                             VALUE row         ,
                             VALUE cell_width  ,
                             VALUE cell_height )
	
   DISPLAY self . user_info [ cell_row , cell_column ]
      AT column , row
      IN WINDOW window
      TO column + cell_width - 1

ENDROUTINE

ROUTINE display_components_inst (       self        ,
                             VALUE cell_column ,
                             VALUE cell_row    ,
                                   window      ,
                             VALUE column      ,
                             VALUE row         ,
                             VALUE cell_width  ,
                             VALUE cell_height )
	
   DISPLAY self . user_info [ cell_row , cell_column ]
      AT column , row
      IN WINDOW window
      TO column + cell_width - 1

ENDROUTINE

ROUTINE prompt_components_inst (       self        ,
                            VALUE cell_column ,
                            VALUE cell_row    ,
                                  window      ,
                            VALUE column      ,
                            VALUE row         ,
                            VALUE cell_width  ,
                            VALUE cell_height )

	self . current_row = cell_row

	if cell_column = 1 then
			
		PROMPT FOR self . user_info [ cell_row , cell_column ]
		      AT column , row
		      IN WINDOW window
		      TO column + cell_width - 1
		      BROWSE ON ANALYSIS.IDENTITY

	elseif cell_column = 2 then

		{GET THE ANALYSIS AND ASSIGN THE LATEST VERSION}

		DECLARE ANL, VERSION
		ANL = self . user_info [ cell_row , 1 ]
		ANL = PAD(ANL," ",15)
		VERSION = SELECT MAX ANALYSIS.ANALYSIS_VERSION WHERE IDENTITY = ANL	
		IF VERSION = EMPTY THEN
			VERSION =1
		ENDIF

		VERSION = PAD(VERSION," ",10)

		{ -- MAX ANALYSIS COMO VALOR DEFAULT --- }
		self . user_info [ cell_row , cell_column ] = VERSION 
		
		DECLARE select_array
		ARRAY select_array

		array_select_add ( select_array    ,
				   ARRAY_SELECT_EQ ,
				   "IDENTITY"      ,
		   		   ANL          )
		
		PROMPT FOR self . user_info [ cell_row , cell_column ]
		      AT column , row
		      IN WINDOW window
		      TO column + cell_width - 1
			BROWSE ON ANALYSIS.ANALYSIS_VERSION
				WITH (VALUE = VERSION, SELECT_ARRAY = SELECT_ARRAY, DISPLAY_ONLY = TRUE)
		      
	elseif cell_column = 3 then

		{GET THE POSSIBLE MATERIAL}

		DECLARE ANL, VERSION
		ANL = self . user_info [ cell_row , 1 ]
		VERSION = self . user_info [ cell_row , 2 ]

		ANL = PAD(ANL," ",15)
		VERSION = PAD(VERSION," ",10)

		DECLARE select_array
		ARRAY select_array

		array_select_add ( select_array    ,
				   ARRAY_SELECT_EQ ,
				   "ANALYSIS"      ,
				   ANL          )
		array_select_add ( select_array     ,
				   ARRAY_SELECT_AND ,
				   EMPTY            ,
				   EMPTY            )
		array_select_add ( select_array        ,
				   ARRAY_SELECT_EQ     ,
				   "ANALYSIS_VERSION"  ,
				   VERSION             )

		PROMPT FOR self . user_info [ cell_row , cell_column ]
		      AT column , row
		      IN WINDOW window
		      TO column + cell_width - 1
		      BROWSE ON VERSIONED_COMPONENT.NAME
	      	      WITH (SELECT_ARRAY = select_array, ALWAYS_VALIDATE = TRUE)
	
	elseif cell_column = 4 then
	
		{GET THE POSSIBLE instrument based on ins template of component}

		DECLARE ANL, VERSION, comp, INST_TYPE
		ANL = self . user_info [ cell_row , 1 ]
		VERSION = self . user_info [ cell_row , 2 ]
		comp = self . user_info [ cell_row , 3 ]

		ANL = PAD(ANL," ",15)
		VERSION = PAD(VERSION," ",10)
		COMP = PAD(COMP, " ",40)
		
		IF ((LENGTH(STRIP(ANL))>0) AND (LENGTH(STRIP(COMP))>0)) THEN
		
			INST_TYPE = SELECT VERSIONED_COMPONENT.INSTRUMENT_TEMPLATE WHERE ANALYSIS = ANL AND ANALYSIS_VERSION = VERSION AND NAME = COMP
			IF INST_TYPE <> EMPTY THEN

				DECLARE select_array
				ARRAY select_array

				array_select_add ( select_array    ,
						   ARRAY_SELECT_EQ ,
						   "INSTRUMENT_TEMPLATE"      ,
						   INST_TYPE          )

				PROMPT FOR self . user_info [ cell_row , cell_column ]
				      AT column , row
				      IN WINDOW window
				      TO column + cell_width - 1
				      BROWSE ON INSTRUMENT.IDENTITY
				      WITH (SELECT_ARRAY = select_array, ALWAYS_VALIDATE = TRUE)
			 ELSE 		
				PROMPT FOR self . user_info [ cell_row , cell_column ]
		      	AT column , row
			      IN WINDOW window
			      TO column + cell_width - 1
				BROWSE ON INSTRUMENT.IDENTITY
			 ENDIF
		ELSE
			PROMPT FOR self . user_info [ cell_row , cell_column ]
			      AT column , row
			      IN WINDOW window
			      TO column + cell_width - 1
			      BROWSE ON INSTRUMENT.IDENTITY
		ENDIF
			
	
	else
	
		PROMPT FOR self . user_info [ cell_row , cell_column ]
		      AT column , row
		      IN WINDOW window
		      TO column + cell_width - 1

	endif
	
		
		
ENDROUTINE


ROUTINE prompt_components (       self        ,
                            VALUE cell_column ,
                            VALUE cell_row    ,
                                  window      ,
                            VALUE column      ,
                            VALUE row         ,
                            VALUE cell_width  ,
                            VALUE cell_height )

	self . current_row = cell_row

	if cell_column = 1 then
		
		PROMPT FOR self . user_info [ cell_row , cell_column ]
		      AT column , row
		      IN WINDOW window
      		      TO column + cell_width - 1
      		      BROWSE ON ANALYSIS.IDENTITY
      		      
	elseif cell_column = 2 then
	
		{GET THE ANALYSIS AND ASSIGN THE LATEST VERSION}
		
		DECLARE ANL, VERSION
		ANL = self . user_info [ cell_row , 1 ]
		ANL = PAD(ANL," ",15)
		VERSION = SELECT MAX ANALYSIS.ANALYSIS_VERSION WHERE IDENTITY = ANL	
		IF VERSION = EMPTY THEN
			VERSION =1
		ENDIF
		
		VERSION = PAD(VERSION," ",10)
		
		DECLARE select_array
		ARRAY select_array

		array_select_add ( select_array    ,
				   ARRAY_SELECT_EQ ,
				   "IDENTITY"      ,
		   		   ANL          )
		
		PROMPT FOR self . user_info [ cell_row , cell_column ]
		      AT column , row
		      IN WINDOW window
		      TO column + cell_width - 1
			BROWSE ON ANALYSIS.ANALYSIS_VERSION
				WITH (VALUE = VERSION, SELECT_ARRAY = SELECT_ARRAY)		      
	
	elseif cell_column = 3 then
		
		{GET THE POSSIBLE MATERIAL}

		DECLARE ANL, VERSION
		ANL = self . user_info [ cell_row , 1 ]
		VERSION = self . user_info [ cell_row , 2 ]

		ANL = PAD(ANL," ",15)
		VERSION = PAD(VERSION," ",10)

		DECLARE select_array
		ARRAY select_array

		array_select_add ( select_array    ,
				   ARRAY_SELECT_EQ ,
				   "ANALYSIS"      ,
				   ANL          )
		array_select_add ( select_array     ,
				   ARRAY_SELECT_AND ,
				   EMPTY            ,
				   EMPTY            )

		array_select_add ( select_array        ,
				   ARRAY_SELECT_EQ     ,
				   "ANALYSIS_VERSION"  ,
				   VERSION             )

		PROMPT FOR self . user_info [ cell_row , cell_column ]
		      AT column , row
		      IN WINDOW window
		      TO column + cell_width - 1
		      BROWSE ON VERSIONED_ANALYSIS_STOCK_USE.STOCK
		      WITH (SELECT_ARRAY = select_array)
	
	elseif cell_column = 4 then
			
		{GET THE STOCK BATCH}

		DECLARE STOCK
		STOCK = self . user_info [ cell_row , 3 ]
		
		DECLARE select_array
		ARRAY select_array

		array_select_add ( select_array    ,
				   ARRAY_SELECT_EQ ,
				   "STOCK"      ,
				   STOCK          )
		
		PROMPT FOR self . user_info [ cell_row , cell_column ]
		      AT column , row
		      IN WINDOW window
		      TO column + cell_width - 1
		      BROWSE ON STOCK_BATCH.STOCK_BATCH_ID
	      	      WITH (SELECT_ARRAY = select_array)
	      	      
	elseIF cell_column = 5 then
	
		PROMPT FOR self . user_info [ cell_row , cell_column ]
		      AT column , row
		      IN WINDOW window
		      TO column + cell_width - 1
		      BROWSE ON REAL WITH (PLACES = 2)
	
	elseIF cell_column = 6 then
		
		PROMPT FOR self . user_info [ cell_row , cell_column ]
		      AT column , row
		      IN WINDOW window
		      TO column + cell_width - 1
      		      BROWSE ON UNIT_HEADER.IDENTITY
	
	else

		PROMPT FOR self . user_info [ cell_row , cell_column ]
		      AT column , row
		      IN WINDOW window
		      TO column + cell_width - 1

	endif
	
ENDROUTINE


ROUTINE verifica_consistencia (ensaio, versao, componente, instrumento ) 
	DECLARE compCheck, instrCheck, INST_TYPE, instrtupeUsed
	
	compCheck = SELECT VERSIONED_COMPONENT.INSTRUMENT_TEMPLATE WHERE ANALYSIS = STRIP(ensaio) AND ANALYSIS_VERSION = STRIP(versao) AND NAME = STRIP(componente)
			
	INST_TYPE = SELECT VERSIONED_COMPONENT.INSTRUMENT_TEMPLATE WHERE ANALYSIS = ensaio AND ANALYSIS_VERSION = versao AND NAME = componente
	
	IF INST_TYPE <> EMPTY THEN
		instrtypeUsed = SELECT INSTRUMENT.insttype_id WHERE IDENTITY = instrumento

	ENDIF
	
    	instrCheck = (strip(insttype)=strip (instrtypeUsed)) 
ENDROUTINE   { verifica_consistencia }

